-- Mexico Toy Sales -SQL Project 

-- 1.Creating Tables

-- Table products

CREATE TABLE Products (
    Product_ID INT PRIMARY KEY,
    Product_Name VARCHAR(150) NOT NULL,
    Product_Category VARCHAR(100),
    Product_Cost DECIMAL (10,2) NOT NULL,
    Product_Price DECIMAL (10,2) NOT NULL
);

--Table stores

CREATE TABLE Stores (
    Store_ID INT PRIMARY KEY,
    Store_Name VARCHAR(150) NOT NULL,
    Store_City VARCHAR(100) NOT NULL,
    Store_Location VARCHAR(100),
    Store_Open_Date DATE
);

--Table sales

CREATE TABLE Sales (
    Sale_ID INT PRIMARY KEY,
    Date DATE NOT NULL,
    Store_ID INT NOT NULL,
    Product_ID INT NOT NULL,
    Units INT DEFAULT 0
);

--Table inventory

CREATE TABLE inventory (
    Store_ID INT NOT NULL,
    Product_ID INT NOT NULL,
    Stock_On_Hand INT DEFAULT 0
);

--Table calender

CREATE TABLE calendar (
    Date DATE PRIMARY KEY  );

SELECT * FROM products;
SELECT * FROM stores;
SELECT * FROM sales;
SELECT * FROM inventory;
SELECT * FROM calendar;

-- ANALYSIS
-- Q1.Find the top 10 best-selling toy products based on total sales quantity.
-- Q2.Show the total revenue generated by each store, ranked from highest to lowest.
-- Q3.Calculate monthly sales for all products to identify peak sales months.
-- Q4.Which region of Mexico generated the highest sales revenue?
-- Q5.Find the percentage contribution of each product category to overall sales.
-- Q6.Find the top 5 cities that generated the highest sales revenue.
-- Q7.Find the average product price by category.
-- Q8.Find the total number of stores in each city.
-- Q9.Find the earliest and latest store opening dates.
-- Q10.Find the top 5 products with the highest stock available.


Q1.Find the top 10 best-selling toy products based on total sales quantity.

SELECT product_name , SUM (units) AS sales_quantity FROM products as p
INNER JOIN sales as s
ON p.product_id = s.product_id 
GROUP BY product_name 
ORDER BY sales_quantity DESC 
LIMIT 10

Q2.Show the total revenue generated by each store, ranked from highest to lowest.

SELECT st.store_name, SUM(s.units * p.product_price) AS total_revenue FROM products as p
INNER JOIN sales AS s
ON P.product_id = s.product_id 
INNER JOIN stores AS st
on st.store_id = s.store_id 
GROUP BY store_name 
ORDER BY total_revenue DESC 

Q3.Calculate monthly sales for all products to identify peak sales months.

SELECT product_name, TO_CHAR(date ,'YYYY-MON')AS months,SUM(units) AS total_sales FROM products as p
INNER JOIN sales AS s 
ON p.product_id = s.product_id 
GROUP BY product_name ,months
ORDER BY total_sales DESC ;

Q4.Which region of Mexico generated the highest sales revenue?

SELECT st.store_city, SUM(s.units * p.product_price) AS sales_revenue FROM sales AS s
INNER JOIN products AS p
ON s.product_id = p.product_id
INNER JOIN stores AS st
ON s.store_id = st.store_id 
GROUP BY st.store_city 
ORDER BY sales_revenue DESC
LIMIT 1;

Q5.Find the percentage contribution of each product category to overall sales.

SELECT  p.product_category, ROUND((SUM(s.units * p.product_price) * 100.0) / (SELECT SUM(s2.units * p2.product_price)  FROM sales s2 
JOIN products p2 ON s2.product_id = p2.product_id), 2 ) AS contribution_percentage FROM sales s
JOIN products p 
ON s.product_id = p.product_id
GROUP BY p.product_category
ORDER BY contribution_percentage DESC;


Q6.Find the top 5 cities that generated the highest sales revenue.
SELECT st.store_city, SUM(s.units * p.product_price) AS total_revenue
FROM sales AS s
INNER JOIN products AS p 
ON s.product_id = p.product_id
INNER JOIN stores AS st
ON s.store_id = st.store_id
GROUP BY st.store_city
ORDER BY total_revenue DESC
LIMIT 5;

Q7.Find the average product price by category.

SELECT product_category , ROUND(AVG(product_price),2) AS avg_price FROM products
GROUP BY product_category

Q8.Find the total number of stores in each city.

SELECT store_city,COUNT(store_city) AS num_of_stores FROM stores
GROUP BY store_city
ORDER BY num_of_stores DESC;


Q9.Find the earliest and latest store opening dates.

SELECT MIN (store_open_date) AS earliest_open_dates, 
	   MAX(store_open_date) AS latest_open_dates 
FROM stores;

Q10.Find the top 5 products with the highest stock available.

SELECT p.product_name, i.stock_on_hand FROM products AS p
INNER JOIN inventory AS i
ON p.product_id = i.product_id
ORDER BY i.stock_on_hand DESC 
LIMIT 5;




SELECT * FROM products;
SELECT * FROM stores;
SELECT * FROM sales;
SELECT * FROM inventory;
SELECT * FROM calendar;

